; -*- Mode: Emacs-Lisp ; Coding: utf-8 -*-
;; ------------------------------------------------------------------------
;; @ load-path

;; load-pathの追加関数
(defun add-to-load-path (&rest paths)
  (let (path)
    (dolist (path paths paths)
      (let ((default-directory (expand-file-name (concat user-emacs-directory path))))
        (add-to-list 'load-path default-directory)
        (if (fboundp 'normal-top-level-add-subdirs-to-load-path)
            (normal-top-level-add-subdirs-to-load-path))))))

;; load-pathに追加するフォルダ
;; 2つ以上フォルダを指定する場合の引数 => (add-to-load-path "elisp" "xxx" "xxx")
(add-to-load-path "elisp")


(tool-bar-mode -1)

; ------------------------------------------------------------------------
; auto-install
; http://www.emacswiki.org/emacs/download/auto-install.el
; ------------------------------------------------------------------------
(when(require 'auto-install nil t)
  ;;インストールディレクトリを設定。.emacs.d/elispに入れる。
  (setq auto-install-directory "~/.emacs.d/elisp/")
  ;;EmacsWikiに登録されているelispの名前を取得する
  (auto-install-update-emacswiki-package-name t)
  ;;必要であればプロキシの設定を行う
  ;;(setq url-proxy-services '(("http" . "hogehoge")))
  ;;install-elispの関数を利用可能にする
  (auto-install-compatibility-setup))


(require 'package)
; Add package-archives
(package-initialize)
(setq package-archives
      '(("ELPA"      . "http://tromey.com/elpa/")
        ;; ("melpa"     . "http://melpa.milkbox.net/packages/")
        ("gnu"       . "http://elpa.gnu.org/packages/")
        ("marmalade" . "http://marmalade-repo.org/packages/")))

; Initialize
(package-initialize)

; melpa.el
;; (require 'melpa)


; ------------------------------------------------------------------------
; @ key bind
; ------------------------------------------------------------------------

;; ウィンドウサイズ変更
(define-key global-map (kbd "M-9") 'enlarge-window-horizontally)
(define-key global-map (kbd "M-8") 'shrink-window-horizontally)
(define-key global-map (kbd "M-7") 'enlarge-window)
(define-key global-map (kbd "M-6") 'shrink-window)

;; 指定行へ移動
(define-key global-map (kbd "C-x C-g") 'goto-line)

;; C-hで一文字削除
(define-key global-map (kbd "C-h") 'backward-delete-char-untabify)

;; カーソル位置から行頭まで削除する
(defun backward-kill-line (arg)
  "Kill chars backward until encountering the end of a line."
  (interactive "p")
  (kill-line 0))

;;折り返し表示ON/OFF                                         ;;
(defun toggle-truncate-lines()                               ;;
  (interactive)                                              ;;
  (if truncate-lines                                         ;;
      (setq truncate-lines nil)                              ;;
    (setq truncate-lines t))                                 ;;
  (recenter))                                                ;;
                                                             ;;
;; 折り返し表示ON/OFF                                        ;;
(define-key global-map (kbd "C-x l") 'toggle-truncate-lines) ;;


;; Undo
(define-key global-map (kbd "C-z") 'undo)

;; Redo
(define-key global-map (kbd "C-/") 'redo)

;; ウィンドウ切り替え
(define-key global-map (kbd "C-t") 'other-window)

;; 改行と同時にインデントする
(define-key global-map (kbd "C-m") 'newline-and-indent)

;; コメントアウトor 解除
(define-key global-map (kbd "M-;") 'comment-or-uncomment-region)
;; BOX型コメント
(define-key global-map (kbd "M-'") 'comment-box)


;;1行スクロール
(define-key global-map (kbd "M-n") '(lambda (arg) (interactive "p") (scroll-up arg)))
(define-key global-map (kbd "M-p") '(lambda (arg) (interactive "p") (scroll-down arg)))

;;置換
(define-key global-map (kbd "C-q") 'query-replace)

;;開き括弧へ移動
(define-key global-map (kbd "C-x C-p") 'backward-list)

;;綴じ括弧へ移動
(define-key global-map (kbd "C-x C-n") 'forward-list)


(require 'cl)
;; 問い合わせを簡略化 yes/no を y/n
(fset 'yes-or-no-p 'y-or-n-p)



; ------------------------------------------------------------------------
; @ yasnippet
; ------------------------------------------------------------------------
;; yasnippetを置いているフォルダにパスを通す
;; (add-to-list 'load-path
;;              (expand-file-name "~/.emacs.d/elisp/yasnippet"))
(require 'yasnippet)
;; ~/.emacs.d/にsnippetsというフォルダを作っておきましょう
(setq yas-snippet-dirs
      '("~/.emacs.d/snippets" ;; 作成するスニペットはここに入る
        "~/.emacs.d/elisp/yasnippet/snippets" ;; 最初から入っていたスニペット(省略可能)
        ))
(yas-global-mode 1)

;; 単語展開キーバインド (ver8.0から明記しないと機能しない)
;; (setqだとtermなどで干渉問題ありでした)
;; もちろんTAB以外でもOK 例えば "C-;"とか
(custom-set-variables '(yas-trigger-key "TAB"))

;; 既存スニペットを挿入する
(define-key yas-minor-mode-map (kbd "C-x i i") 'yas-insert-snippet)
;; 新規スニペットを作成するバッファを用意する
(define-key yas-minor-mode-map (kbd "C-x i n") 'yas-new-snippet)
;; 既存スニペットを閲覧・編集する
(define-key yas-minor-mode-map (kbd "C-x i v") 'yas-visit-snippet-file)


; ------------------------------------------------------------------------
; @ helm
; ------------------------------------------------------------------------

(require 'helm-config)
(helm-mode 1)
;; (helm-descbinds-mode)
;; (require 'helm-migemo)
;; (setq helm-use-migemo t)

;; 自動補完を無効
(custom-set-variables '(helm-ff-auto-update-initial-value nil))
;; ミニバッファでC-hをバックスペースに割り当て
(define-key helm-read-file-map (kbd "C-h") 'delete-backward-char)
;; TABで補完
(define-key helm-read-file-map (kbd "<tab>") 'helm-execute-persistent-action)
;; Command+f で helm-for-files
(define-key global-map (kbd "s-f") 'helm-for-files)
;; C-x b で helm-for-files
(define-key global-map (kbd "C-x b") 'helm-for-files)
;; Command+y で anything-show-kill-ring
(define-key global-map (kbd "s-y") 'helm-show-kill-ring)
;; Command+r で anything-resume
(define-key global-map (kbd "s-r") 'helm-resume)

;; (when (require 'popwin)
;;   (setq helm-samewindow nil)
;;   (setq display-buffer-function 'popwin:display-buffer)
;;   (setq popwin:special-display-config '(("*compilatoin*" :noselect t)
;;                                         ("helm" :regexp t :height 0.4)
;;                                         )))

; ------------------------------------------------------------------------
; @ auto complete
; ------------------------------------------------------------------------

;;; 適用するメジャーモードを足す
(add-to-list 'ac-modes 'scss-mode)
(add-to-list 'ac-modes 'web-mode)
(add-to-list 'ac-modes 'coffee-mode)

;;; ベースとなるソースを指定
(defvar my-ac-sources
              '(ac-source-yasnippet
                ac-source-abbrev
                ac-source-dictionary
                ac-source-words-in-same-mode-buffers))

;;; 個別にソースを指定
(defun ac-scss-mode-setup ()
  (setq-default ac-sources (append '(ac-source-css-property) my-ac-sources)))
(defun ac-web-mode-setup ()
  (setq-default ac-sources my-ac-sources))
(defun ac-coffee-mode-setup ()
  (setq-default ac-sources my-ac-sources))
(add-hook 'scss-mode-hook 'ac-scss-mode-setup)
(add-hook 'web-mode-hook 'ac-web-mode-setup)
(add-hook 'coffee-mode-hook 'ac-coffee-mode-setup)

(global-auto-complete-mode t)

;;; C-n / C-p で選択
(setq ac-use-menu-map t)


;;; yasnippetのbindingを指定するとエラーが出るので回避する方法。
(setf (symbol-function 'yas-active-keys)
      (lambda ()
        (remove-duplicates (mapcan #'yas--table-all-keys (yas--get-snippet-tables)))))
